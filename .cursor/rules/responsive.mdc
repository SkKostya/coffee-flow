---
description: Адаптивная, резиновая верстка
alwaysApply: false
---

# Coffee Flow Responsive Design Rules

## Правила для адаптивной верстки

### Основные принципы

- ВСЕ компоненты должны быть адаптивными для мобильных устройств и планшетов
- Используйте responsive breakpoints для разных размеров экранов
- Применяйте гибкие размеры и отступы
- Обеспечивайте оптимальный UX на всех устройствах

### Breakpoints и размеры экранов

#### 1. Стандартные breakpoints

```typescript
// ✅ ПРАВИЛЬНО - использование стандартных breakpoints
export const Breakpoints = {
  // Мобильные устройства (портретная ориентация)
  mobile: {
    min: 320,
    max: 767,
  },
  // Планшеты (портретная и ландшафтная ориентация)
  tablet: {
    min: 768,
    max: Infinity,
  },
} as const;

export type Breakpoint = keyof typeof Breakpoints;
```

#### 2. Хук для определения размера экрана

```typescript
// ✅ ПРАВИЛЬНО - хук для responsive дизайна
import { useState, useEffect } from 'react';
import { Dimensions } from 'react-native';

interface UseResponsiveReturn {
  isMobile: boolean;
  isTablet: boolean;
  currentBreakpoint: Breakpoint;
  screenWidth: number;
  screenHeight: number;
}

const useResponsive = (): UseResponsiveReturn => {
  const [screenDimensions, setScreenDimensions] = useState({
    width: Dimensions.get('window').width,
    height: Dimensions.get('window').height,
  });

  useEffect(() => {
    const subscription = Dimensions.addEventListener('change', ({ window }) => {
      setScreenDimensions({
        width: window.width,
        height: window.height,
      });
    });

    return () => subscription?.remove();
  }, []);

  const { width, height } = screenDimensions;

  const isMobile =
    width >= Breakpoints.mobile.min && width <= Breakpoints.mobile.max;
  const isTablet = width >= Breakpoints.tablet.min;

  const getCurrentBreakpoint = (): Breakpoint => {
    if (isMobile) return 'mobile';
    return 'tablet';
  };

  return {
    isMobile,
    isTablet,
    currentBreakpoint: getCurrentBreakpoint(),
    screenWidth: width,
    screenHeight: height,
  };
};

export default useResponsive;
```

### Responsive стили

#### 1. Адаптивные размеры

- Используйте относительные единицы измерения
- Применяйте разные размеры для разных breakpoints
- Используйте flexbox для гибких макетов

```typescript
// ✅ ПРАВИЛЬНО - адаптивные стили
const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingHorizontal: 16,
    paddingVertical: 20,
  },
  content: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: '600',
    textAlign: 'center',
    marginBottom: 16,
  },
  subtitle: {
    fontSize: 16,
    textAlign: 'center',
    marginBottom: 24,
    paddingHorizontal: 20,
  },
});

// Responsive стили для разных breakpoints
const getResponsiveStyles = (breakpoint: Breakpoint) => {
  switch (breakpoint) {
    case 'mobile':
      return {
        container: {
          paddingHorizontal: 16,
          paddingVertical: 20,
        },
        title: {
          fontSize: 24,
          marginBottom: 16,
        },
        subtitle: {
          fontSize: 16,
          marginBottom: 24,
          paddingHorizontal: 20,
        },
      };
    case 'tablet':
      return {
        container: {
          paddingHorizontal: 32,
          paddingVertical: 32,
        },
        title: {
          fontSize: 32,
          marginBottom: 24,
        },
        subtitle: {
          fontSize: 20,
          marginBottom: 32,
          paddingHorizontal: 40,
        },
      };

    default:
      return styles;
  }
};

// ❌ НЕПРАВИЛЬНО - фиксированные размеры
const styles = StyleSheet.create({
  container: {
    width: 375, // фиксированная ширина
    height: 667, // фиксированная высота
    padding: 20, // фиксированные отступы
  },
});
```

#### 2. Адаптивные компоненты

- Создавайте компоненты, которые адаптируются к размеру экрана
- Используйте conditional rendering для разных breakpoints
- Применяйте разные layouts для мобильных и планшетов

```typescript
// ✅ ПРАВИЛЬНО - адаптивный компонент
interface ResponsiveLayoutProps {
  children: React.ReactNode;
  mobileLayout?: React.ReactNode;
  tabletLayout?: React.ReactNode;
}

const ResponsiveLayout: React.FC<ResponsiveLayoutProps> = ({
  children,
  mobileLayout,
  tabletLayout,
}) => {
  const { isMobile, isTablet } = useResponsive();

  if (isMobile && mobileLayout) {
    return <>{mobileLayout}</>;
  }

  if (isTablet && tabletLayout) {
    return <>{tabletLayout}</>;
  }

  return <>{children}</>;
};

// Использование
const AuthScreen = () => {
  const { isMobile, isTablet } = useResponsive();

  return (
    <ResponsiveLayout
      mobileLayout={
        <View style={styles.mobileContainer}>
          <CoffeeLogo />
          <AuthForm />
        </View>
      }
      tabletLayout={
        <View style={styles.tabletContainer}>
          <View style={styles.leftPanel}>
            <CoffeeLogo />
            <Text style={styles.welcomeText}>
              Добро пожаловать в Coffee Flow
            </Text>
          </View>
          <View style={styles.rightPanel}>
            <AuthForm />
          </View>
        </View>
      }
    >
      {/* Дефолтный layout */}
      <View style={styles.defaultContainer}>
        <CoffeeLogo />
        <AuthForm />
      </View>
    </ResponsiveLayout>
  );
};

// ❌ НЕПРАВИЛЬНО - неадаптивный компонент
const AuthScreen = () => (
  <View style={styles.container}>
    <CoffeeLogo />
    <AuthForm />
  </View>
);
```

### Адаптивные макеты

#### 1. Grid система

- Используйте flexbox для создания адаптивных grid макетов
- Применяйте разные количества колонок для разных breakpoints
- Обеспечивайте правильное выравнивание элементов

```typescript
// ✅ ПРАВИЛЬНО - адаптивный grid
const ResponsiveGrid: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const { isMobile, isTablet } = useResponsive();

  const getGridStyle = () => {
    if (isMobile) {
      return {
        flexDirection: 'column' as const,
        gap: 16,
      };
    }

    return {
      flexDirection: 'row' as const,
      flexWrap: 'wrap' as const,
      gap: 20,
    };
  };

  return (
    <View style={[styles.grid, getGridStyle()]}>
      {React.Children.map(children, (child, index) => (
        <View
          key={index}
          style={[
            styles.gridItem,
            {
              flex: isMobile ? 1 : '0 0 calc(50% - 10px)',
            },
          ]}
        >
          {child}
        </View>
      ))}
    </View>
  );
};

// ❌ НЕПРАВИЛЬНО - фиксированный grid
const Grid = ({ children }) => (
  <View style={{ flexDirection: 'row', flexWrap: 'wrap' }}>{children}</View>
);
```

#### 2. Адаптивные отступы и размеры

- Используйте responsive spacing
- Применяйте разные размеры шрифтов для разных устройств
- Обеспечивайте правильные пропорции элементов

```typescript
// ✅ ПРАВИЛЬНО - responsive spacing
const getResponsiveSpacing = (breakpoint: Breakpoint) => {
  const spacing = {
    mobile: {
      xs: 4,
      sm: 8,
      md: 16,
      lg: 20,
      xl: 24,
      xxl: 32,
    },
    tablet: {
      xs: 6,
      sm: 12,
      md: 24,
      lg: 32,
      xl: 40,
      xxl: 48,
    },
  };

  return spacing[breakpoint];
};

const getResponsiveTypography = (breakpoint: Breakpoint) => {
  const typography = {
    mobile: {
      h1: 24,
      h2: 20,
      h3: 18,
      body: 16,
      caption: 14,
      small: 12,
    },
    tablet: {
      h1: 32,
      h2: 28,
      h3: 24,
      body: 18,
      caption: 16,
      small: 14,
    },
  };

  return typography[breakpoint];
};

// ❌ НЕПРАВИЛЬНО - фиксированные размеры
const styles = StyleSheet.create({
  title: {
    fontSize: 24, // фиксированный размер
    marginBottom: 16, // фиксированный отступ
  },
});
```

### Адаптивные изображения и иконки

#### 1. Масштабирование изображений

- Используйте responsive размеры для изображений
- Применяйте разные разрешения для разных устройств
- Обеспечивайте качество на всех экранах

```typescript
// ✅ ПРАВИЛЬНО - адаптивные изображения
interface ResponsiveImageProps {
  source: any;
  alt?: string;
  mobileSize?: { width: number; height: number };
  tabletSize?: { width: number; height: number };
}

const ResponsiveImage: React.FC<ResponsiveImageProps> = ({
  source,
  alt,
  mobileSize = { width: 200, height: 200 },
  tabletSize = { width: 300, height: 300 },
}) => {
  const { currentBreakpoint } = useResponsive();

  const getImageSize = () => {
    switch (currentBreakpoint) {
      case 'mobile':
        return mobileSize;
      case 'tablet':
        return tabletSize;
      default:
        return mobileSize;
    }
  };

  const { width, height } = getImageSize();

  return (
    <Image
      source={source}
      style={{ width, height }}
      accessibilityLabel={alt}
      resizeMode="contain"
    />
  );
};

// ❌ НЕПРАВИЛЬНО - фиксированные размеры изображений
const Image = ({ source }) => (
  <Image source={source} style={{ width: 200, height: 200 }} />
);
```

### Адаптивная навигация

#### 1. Разные паттерны навигации

- Используйте tab navigation для мобильных устройств
- Применяйте sidebar navigation для планшетов
- Обеспечивайте удобную навигацию на всех устройствах

```typescript
// ✅ ПРАВИЛЬНО - адаптивная навигация
const ResponsiveNavigation = () => {
  const { isMobile, isTablet } = useResponsive();

  if (isMobile) {
    return (
      <Tab.Navigator>
        <Tab.Screen name="Home" component={HomeScreen} />
        <Tab.Screen name="Profile" component={ProfileScreen} />
        <Tab.Screen name="Settings" component={SettingsScreen} />
      </Tab.Navigator>
    );
  }

  if (isTablet) {
    return (
      <Drawer.Navigator>
        <Drawer.Screen name="Home" component={HomeScreen} />
        <Drawer.Screen name="Profile" component={ProfileScreen} />
        <Drawer.Screen name="Settings" component={SettingsScreen} />
      </Drawer.Navigator>
    );
  }

  return (
    <Stack.Navigator>
      <Stack.Screen name="Home" component={HomeScreen} />
      <Stack.Screen name="Profile" component={ProfileScreen} />
      <Stack.Screen name="Settings" component={SettingsScreen} />
    </Stack.Navigator>
  );
};

// ❌ НЕПРАВИЛЬНО - одинаковая навигация для всех устройств
const Navigation = () => (
  <Tab.Navigator>
    <Tab.Screen name="Home" component={HomeScreen} />
    <Tab.Screen name="Profile" component={ProfileScreen} />
  </Tab.Navigator>
);
```

### Тестирование адаптивности

#### 1. Тестирование на разных устройствах

- Тестируйте на реальных мобильных устройствах и планшетах
- Используйте эмуляторы для разных размеров экранов
- Проверяйте ориентацию экрана (портрет/ландшафт)

#### 2. Пример теста

```typescript
import { render } from '@testing-library/react-native';
import { Dimensions } from 'react-native';
import ResponsiveComponent from './ResponsiveComponent';

describe('ResponsiveComponent', () => {
  it('renders mobile layout on small screens', () => {
    // Мокаем размер экрана для мобильного устройства
    Dimensions.get = jest.fn().mockReturnValue({
      width: 375,
      height: 667,
    });

    const { getByTestId } = render(<ResponsiveComponent />);
    expect(getByTestId('mobile-layout')).toBeTruthy();
  });

  it('renders tablet layout on medium screens', () => {
    // Мокаем размер экрана для планшета
    Dimensions.get = jest.fn().mockReturnValue({
      width: 768,
      height: 1024,
    });

    const { getByTestId } = render(<ResponsiveComponent />);
    expect(getByTestId('tablet-layout')).toBeTruthy();
  });
});
```

### Запрещено

- ❌ Создавать компоненты с фиксированными размерами
- ❌ Игнорировать разные размеры экранов
- ❌ Использовать абсолютные единицы измерения
- ❌ Создавать неадаптивные макеты
- ❌ Игнорировать ориентацию экрана

### Рекомендуется

- ✅ Использовать responsive breakpoints
- ✅ Создавать адаптивные компоненты
- ✅ Применять гибкие размеры и отступы
- ✅ Тестировать на разных устройствах
- ✅ Учитывать ориентацию экрана
- ✅ Использовать flexbox для макетов
- ✅ Создавать responsive grid системы

# Coffee Flow Responsive Design Rules

## Правила для адаптивной верстки

### Основные принципы

- ВСЕ компоненты должны быть адаптивными для мобильных устройств и планшетов
- Используйте responsive breakpoints для разных размеров экранов
- Применяйте гибкие размеры и отступы
- Обеспечивайте оптимальный UX на всех устройствах

### Breakpoints и размеры экранов

#### 1. Стандартные breakpoints

```typescript
// ✅ ПРАВИЛЬНО - использование стандартных breakpoints
export const Breakpoints = {
  // Мобильные устройства (портретная ориентация)
  mobile: {
    min: 320,
    max: 767,
  },
  // Планшеты (портретная и ландшафтная ориентация)
  tablet: {
    min: 768,
    max: Infinity,
  },
} as const;

export type Breakpoint = keyof typeof Breakpoints;
```

#### 2. Хук для определения размера экрана

```typescript
// ✅ ПРАВИЛЬНО - хук для responsive дизайна
import { useState, useEffect } from 'react';
import { Dimensions } from 'react-native';

interface UseResponsiveReturn {
  isMobile: boolean;
  isTablet: boolean;
  currentBreakpoint: Breakpoint;
  screenWidth: number;
  screenHeight: number;
}

const useResponsive = (): UseResponsiveReturn => {
  const [screenDimensions, setScreenDimensions] = useState({
    width: Dimensions.get('window').width,
    height: Dimensions.get('window').height,
  });

  useEffect(() => {
    const subscription = Dimensions.addEventListener('change', ({ window }) => {
      setScreenDimensions({
        width: window.width,
        height: window.height,
      });
    });

    return () => subscription?.remove();
  }, []);

  const { width, height } = screenDimensions;

  const isMobile =
    width >= Breakpoints.mobile.min && width <= Breakpoints.mobile.max;
  const isTablet = width >= Breakpoints.tablet.min;

  const getCurrentBreakpoint = (): Breakpoint => {
    if (isMobile) return 'mobile';
    return 'tablet';
  };

  return {
    isMobile,
    isTablet,
    currentBreakpoint: getCurrentBreakpoint(),
    screenWidth: width,
    screenHeight: height,
  };
};

export default useResponsive;
```

### Responsive стили

#### 1. Адаптивные размеры

- Используйте относительные единицы измерения
- Применяйте разные размеры для разных breakpoints
- Используйте flexbox для гибких макетов

```typescript
// ✅ ПРАВИЛЬНО - адаптивные стили
const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingHorizontal: 16,
    paddingVertical: 20,
  },
  content: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: '600',
    textAlign: 'center',
    marginBottom: 16,
  },
  subtitle: {
    fontSize: 16,
    textAlign: 'center',
    marginBottom: 24,
    paddingHorizontal: 20,
  },
});

// Responsive стили для разных breakpoints
const getResponsiveStyles = (breakpoint: Breakpoint) => {
  switch (breakpoint) {
    case 'mobile':
      return {
        container: {
          paddingHorizontal: 16,
          paddingVertical: 20,
        },
        title: {
          fontSize: 24,
          marginBottom: 16,
        },
        subtitle: {
          fontSize: 16,
          marginBottom: 24,
          paddingHorizontal: 20,
        },
      };
    case 'tablet':
      return {
        container: {
          paddingHorizontal: 32,
          paddingVertical: 32,
        },
        title: {
          fontSize: 32,
          marginBottom: 24,
        },
        subtitle: {
          fontSize: 20,
          marginBottom: 32,
          paddingHorizontal: 40,
        },
      };

    default:
      return styles;
  }
};

// ❌ НЕПРАВИЛЬНО - фиксированные размеры
const styles = StyleSheet.create({
  container: {
    width: 375, // фиксированная ширина
    height: 667, // фиксированная высота
    padding: 20, // фиксированные отступы
  },
});
```

#### 2. Адаптивные компоненты

- Создавайте компоненты, которые адаптируются к размеру экрана
- Используйте conditional rendering для разных breakpoints
- Применяйте разные layouts для мобильных и планшетов

```typescript
// ✅ ПРАВИЛЬНО - адаптивный компонент
interface ResponsiveLayoutProps {
  children: React.ReactNode;
  mobileLayout?: React.ReactNode;
  tabletLayout?: React.ReactNode;
}

const ResponsiveLayout: React.FC<ResponsiveLayoutProps> = ({
  children,
  mobileLayout,
  tabletLayout,
}) => {
  const { isMobile, isTablet } = useResponsive();

  if (isMobile && mobileLayout) {
    return <>{mobileLayout}</>;
  }

  if (isTablet && tabletLayout) {
    return <>{tabletLayout}</>;
  }

  return <>{children}</>;
};

// Использование
const AuthScreen = () => {
  const { isMobile, isTablet } = useResponsive();

  return (
    <ResponsiveLayout
      mobileLayout={
        <View style={styles.mobileContainer}>
          <CoffeeLogo />
          <AuthForm />
        </View>
      }
      tabletLayout={
        <View style={styles.tabletContainer}>
          <View style={styles.leftPanel}>
            <CoffeeLogo />
            <Text style={styles.welcomeText}>
              Добро пожаловать в Coffee Flow
            </Text>
          </View>
          <View style={styles.rightPanel}>
            <AuthForm />
          </View>
        </View>
      }
    >
      {/* Дефолтный layout */}
      <View style={styles.defaultContainer}>
        <CoffeeLogo />
        <AuthForm />
      </View>
    </ResponsiveLayout>
  );
};

// ❌ НЕПРАВИЛЬНО - неадаптивный компонент
const AuthScreen = () => (
  <View style={styles.container}>
    <CoffeeLogo />
    <AuthForm />
  </View>
);
```

### Адаптивные макеты

#### 1. Grid система

- Используйте flexbox для создания адаптивных grid макетов
- Применяйте разные количества колонок для разных breakpoints
- Обеспечивайте правильное выравнивание элементов

```typescript
// ✅ ПРАВИЛЬНО - адаптивный grid
const ResponsiveGrid: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const { isMobile, isTablet } = useResponsive();

  const getGridStyle = () => {
    if (isMobile) {
      return {
        flexDirection: 'column' as const,
        gap: 16,
      };
    }

    return {
      flexDirection: 'row' as const,
      flexWrap: 'wrap' as const,
      gap: 20,
    };
  };

  return (
    <View style={[styles.grid, getGridStyle()]}>
      {React.Children.map(children, (child, index) => (
        <View
          key={index}
          style={[
            styles.gridItem,
            {
              flex: isMobile ? 1 : '0 0 calc(50% - 10px)',
            },
          ]}
        >
          {child}
        </View>
      ))}
    </View>
  );
};

// ❌ НЕПРАВИЛЬНО - фиксированный grid
const Grid = ({ children }) => (
  <View style={{ flexDirection: 'row', flexWrap: 'wrap' }}>{children}</View>
);
```

#### 2. Адаптивные отступы и размеры

- Используйте responsive spacing
- Применяйте разные размеры шрифтов для разных устройств
- Обеспечивайте правильные пропорции элементов

```typescript
// ✅ ПРАВИЛЬНО - responsive spacing
const getResponsiveSpacing = (breakpoint: Breakpoint) => {
  const spacing = {
    mobile: {
      xs: 4,
      sm: 8,
      md: 16,
      lg: 20,
      xl: 24,
      xxl: 32,
    },
    tablet: {
      xs: 6,
      sm: 12,
      md: 24,
      lg: 32,
      xl: 40,
      xxl: 48,
    },
  };

  return spacing[breakpoint];
};

const getResponsiveTypography = (breakpoint: Breakpoint) => {
  const typography = {
    mobile: {
      h1: 24,
      h2: 20,
      h3: 18,
      body: 16,
      caption: 14,
      small: 12,
    },
    tablet: {
      h1: 32,
      h2: 28,
      h3: 24,
      body: 18,
      caption: 16,
      small: 14,
    },
  };

  return typography[breakpoint];
};

// ❌ НЕПРАВИЛЬНО - фиксированные размеры
const styles = StyleSheet.create({
  title: {
    fontSize: 24, // фиксированный размер
    marginBottom: 16, // фиксированный отступ
  },
});
```

### Адаптивные изображения и иконки

#### 1. Масштабирование изображений

- Используйте responsive размеры для изображений
- Применяйте разные разрешения для разных устройств
- Обеспечивайте качество на всех экранах

```typescript
// ✅ ПРАВИЛЬНО - адаптивные изображения
interface ResponsiveImageProps {
  source: any;
  alt?: string;
  mobileSize?: { width: number; height: number };
  tabletSize?: { width: number; height: number };
}

const ResponsiveImage: React.FC<ResponsiveImageProps> = ({
  source,
  alt,
  mobileSize = { width: 200, height: 200 },
  tabletSize = { width: 300, height: 300 },
}) => {
  const { currentBreakpoint } = useResponsive();

  const getImageSize = () => {
    switch (currentBreakpoint) {
      case 'mobile':
        return mobileSize;
      case 'tablet':
        return tabletSize;
      default:
        return mobileSize;
    }
  };

  const { width, height } = getImageSize();

  return (
    <Image
      source={source}
      style={{ width, height }}
      accessibilityLabel={alt}
      resizeMode="contain"
    />
  );
};

// ❌ НЕПРАВИЛЬНО - фиксированные размеры изображений
const Image = ({ source }) => (
  <Image source={source} style={{ width: 200, height: 200 }} />
);
```

### Адаптивная навигация

#### 1. Разные паттерны навигации

- Используйте tab navigation для мобильных устройств
- Применяйте sidebar navigation для планшетов
- Обеспечивайте удобную навигацию на всех устройствах

```typescript
// ✅ ПРАВИЛЬНО - адаптивная навигация
const ResponsiveNavigation = () => {
  const { isMobile, isTablet } = useResponsive();

  if (isMobile) {
    return (
      <Tab.Navigator>
        <Tab.Screen name="Home" component={HomeScreen} />
        <Tab.Screen name="Profile" component={ProfileScreen} />
        <Tab.Screen name="Settings" component={SettingsScreen} />
      </Tab.Navigator>
    );
  }

  if (isTablet) {
    return (
      <Drawer.Navigator>
        <Drawer.Screen name="Home" component={HomeScreen} />
        <Drawer.Screen name="Profile" component={ProfileScreen} />
        <Drawer.Screen name="Settings" component={SettingsScreen} />
      </Drawer.Navigator>
    );
  }

  return (
    <Stack.Navigator>
      <Stack.Screen name="Home" component={HomeScreen} />
      <Stack.Screen name="Profile" component={ProfileScreen} />
      <Stack.Screen name="Settings" component={SettingsScreen} />
    </Stack.Navigator>
  );
};

// ❌ НЕПРАВИЛЬНО - одинаковая навигация для всех устройств
const Navigation = () => (
  <Tab.Navigator>
    <Tab.Screen name="Home" component={HomeScreen} />
    <Tab.Screen name="Profile" component={ProfileScreen} />
  </Tab.Navigator>
);
```

### Тестирование адаптивности

#### 1. Тестирование на разных устройствах

- Тестируйте на реальных мобильных устройствах и планшетах
- Используйте эмуляторы для разных размеров экранов
- Проверяйте ориентацию экрана (портрет/ландшафт)

#### 2. Пример теста

```typescript
import { render } from '@testing-library/react-native';
import { Dimensions } from 'react-native';
import ResponsiveComponent from './ResponsiveComponent';

describe('ResponsiveComponent', () => {
  it('renders mobile layout on small screens', () => {
    // Мокаем размер экрана для мобильного устройства
    Dimensions.get = jest.fn().mockReturnValue({
      width: 375,
      height: 667,
    });

    const { getByTestId } = render(<ResponsiveComponent />);
    expect(getByTestId('mobile-layout')).toBeTruthy();
  });

  it('renders tablet layout on medium screens', () => {
    // Мокаем размер экрана для планшета
    Dimensions.get = jest.fn().mockReturnValue({
      width: 768,
      height: 1024,
    });

    const { getByTestId } = render(<ResponsiveComponent />);
    expect(getByTestId('tablet-layout')).toBeTruthy();
  });
});
```

### Запрещено

- ❌ Создавать компоненты с фиксированными размерами
- ❌ Игнорировать разные размеры экранов
- ❌ Использовать абсолютные единицы измерения
- ❌ Создавать неадаптивные макеты
- ❌ Игнорировать ориентацию экрана

### Рекомендуется

- ✅ Использовать responsive breakpoints
- ✅ Создавать адаптивные компоненты
- ✅ Применять гибкие размеры и отступы
- ✅ Тестировать на разных устройствах
- ✅ Учитывать ориентацию экрана
- ✅ Использовать flexbox для макетов
- ✅ Создавать responsive grid системы
