---
description: Создание новых папок, файлов, модулей и прочего
alwaysApply: false
---

# Coffee Flow Architecture Rules

## Архитектура проекта Coffee Flow

### Основные принципы

- Проект использует модульную архитектуру с четким разделением ответственности
- Каждый модуль (auth, coffee-shops, shared) имеет свою внутреннюю структуру
- Глобальные компоненты и утилиты размещаются в `src/shared`
- Специфичные для модуля компоненты размещаются внутри модуля
- Экранные компоненты размещаются в папке `app/` с группировкой по модулям

### Структура проекта

```
app/                          # Экранные компоненты (Expo Router)
├── _layout.tsx              # Корневой layout с провайдерами
├── index.tsx                # Главная страница
├── onboarding.tsx           # Онбординг
├── profile.tsx              # Профиль пользователя
├── favorites.tsx            # Избранные кофейни
├── orders.tsx               # История заказов
├── checkout.tsx             # Оформление заказа
├── cart.tsx                 # Корзина
├── menu.tsx                 # Меню кофейни
├── auth/                    # Модуль аутентификации
│   └── login.tsx           # Экран входа
└── coffee-shops/            # Модуль кофеен
    ├── index.tsx            # Список кофеен
    └── [id].tsx             # Детальная страница кофейни

src/
├── auth/                    # Модуль аутентификации
│   ├── components/         # UI компоненты модуля
│   ├── hooks/             # Хуки модуля
│   ├── validation/        # Валидация модуля
│   └── index.ts           # Публичный API модуля
├── coffee-shops/           # Модуль кофеен
│   ├── components/        # UI компоненты модуля
│   ├── hooks/             # Хуки модуля
│   ├── services/          # API сервисы
│   └── index.ts           # Публичный API модуля
├── shared/                 # Глобальные компоненты и утилиты
│   ├── components/        # Переиспользуемые UI компоненты
│   ├── hooks/             # Глобальные хуки
│   ├── contexts/          # React контексты
│   ├── constants/         # Глобальные константы
│   └── theme/             # Тема и стили
└── types/                  # TypeScript типы
    ├── index.ts           # Главный экспорт типов
    ├── auth.ts            # Типы аутентификации
    ├── coffee-shops.ts    # Типы кофеен
    └── orders.ts          # Типы заказов
```

### Правила организации модулей

#### 1. Модульная структура

- Каждый модуль должен иметь четко определенную ответственность
- Модули должны быть независимыми и слабо связанными
- Внутри модуля используйте стандартную структуру папок
- Экранные компоненты размещаются в `app/` с группировкой по модулям

#### 2. Стандартная структура модуля

```
module-name/
├── components/             # UI компоненты модуля
├── hooks/                 # Хуки модуля
├── validation/            # Валидация (если применимо)
├── services/              # API сервисы (если применимо)
├── utils/                 # Утилиты модуля (если применимо)
└── index.ts               # Публичный API модуля
```

#### 3. Публичный API модуля

- Каждый модуль должен экспортировать только необходимые компоненты через `index.ts`
- Не экспортируйте внутренние детали реализации
- Экспортируйте типы, если они нужны другим модулям

```typescript
// ✅ ПРАВИЛЬНО - экспорт только публичного API
export { default as Button } from './Button';
export { default as InputField } from './InputField';
export type { AuthFormData } from '../validation/validationSchema';

// ❌ НЕПРАВИЛЬНО - экспорт внутренних деталей
export { default as InternalHelper } from './utils/InternalHelper';
```

### Правила для shared модуля

#### 1. Глобальные компоненты

- Размещайте в `src/shared/components` только компоненты, которые используются в нескольких модулях
- Компоненты должны быть максимально переиспользуемыми
- Используйте пропсы для настройки поведения

#### 2. Глобальные хуки

- Размещайте в `src/shared/hooks` хуки, которые используются в нескольких модулях
- Хуки должны быть независимыми от конкретного модуля
- Экспортируйте все хуки через `src/shared/hooks/index.ts`

#### 3. Константы и контексты

- Размещайте в `src/shared/constants` глобальные константы (цвета, размеры, API endpoints)
- Размещайте в `src/shared/contexts` React контексты для глобального состояния

### Правила именования

#### 1. Файлы и папки

- Используйте camelCase для файлов компонентов и хуков
- Используйте kebab-case для папок
- Используйте PascalCase для имен компонентов

```typescript
// ✅ ПРАВИЛЬНО
components / Button.tsx;
hooks / useAuth.ts;
validation / validationSchema.ts;

// ❌ НЕПРАВИЛЬНО
components / button.tsx;
hooks / UseAuth.ts;
validation / validation - schema.ts;
```

#### 2. Экспорты

- Используйте именованные экспорты для утилит и типов
- Используйте default экспорты для компонентов и хуков
- Группируйте связанные экспорты в одном файле

```typescript
// ✅ ПРАВИЛЬНО
export { default as Button } from './Button';
export { default as InputField } from './InputField';
export type { AuthFormData, AuthState } from './types';

// ❌ НЕПРАВИЛЬНО
export Button from './Button';
export * from './Button';
```

### Правила импортов

#### 1. Относительные пути

- Используйте относительные пути для импортов внутри модуля
- Используйте абсолютные пути для импортов из shared модуля
- Избегайте глубокой вложенности импортов

```typescript
// ✅ ПРАВИЛЬНО - импорт внутри модуля
import { Button } from './components/Button';
import { useAuth } from './hooks/useAuth';

// ✅ ПРАВИЛЬНО - импорт из shared
import { useColors } from '../../shared/hooks/useColors';
import Colors from '../../shared/constants/Colors';

// ❌ НЕПРАВИЛЬНО - слишком глубокие импорты
import { Button } from '../../../components/Button';
```

#### 2. Импорт типов

- Импортируйте типы из центрального `src/types/index.ts`
- Группируйте связанные типы в одном файле
- Используйте barrel exports для упрощения импортов

```typescript
// ✅ ПРАВИЛЬНО
import type { AuthFormData, AuthState } from '../../types';

// ❌ НЕПРАВИЛЬНО
import type { AuthFormData } from '../validation/validationSchema';
import type { AuthState } from '../hooks/useAuth';
```

### Правила создания новых файлов

#### 1. Когда создавать в модуле

- Компоненты, специфичные для функциональности модуля
- Хуки, которые работают только с данными модуля
- Валидация, специфичная для модуля
- Утилиты, используемые только внутри модуля

#### 2. Когда создавать в shared

- Компоненты, которые используются в нескольких модулях
- Хуки, которые работают с глобальным состоянием
- Константы, используемые во всем приложении
- Контексты для глобального состояния

#### 3. Примеры правильного размещения

```typescript
// ✅ В модуле auth - специфичный компонент
src / auth / components / PhoneInput.tsx;

// ✅ В модуле coffee-shops - специфичный компонент
src / coffee - shops / components / CoffeeShopCard.tsx;

// ✅ В shared - переиспользуемый компонент
src / shared / components / BottomNavigation.tsx;

// ✅ В shared - глобальный хук
src / shared / hooks / useColors.ts;

// ✅ В shared - глобальные константы
src / shared / constants / Colors.ts;
```

#### 4. Критерии для определения размещения

**Размещать в модуле, если компонент/хук:**

- Использует специфичные для модуля типы данных
- Содержит бизнес-логику модуля
- Имеет зависимости только внутри модуля
- Не планируется к переиспользованию в других модулях

**Размещать в shared, если компонент/хук:**

- Используется или может использоваться в нескольких модулях
- Не содержит специфичной бизнес-логики
- Работает с глобальными данными (темы, цвета, размеры)
- Является базовым UI элементом (кнопки, инпуты, навигация)

#### 5. Примеры неправильного размещения

```typescript
// ❌ НЕПРАВИЛЬНО - специфичный компонент в shared
src / shared / components / CoffeeShopCard.tsx; // должен быть в coffee-shops/

// ❌ НЕПРАВИЛЬНО - переиспользуемый компонент в модуле
src / auth / components / Button.tsx; // должен быть в shared/

// ❌ НЕПРАВИЛЬНО - глобальный хук в модуле
src / auth / hooks / useColors.ts; // должен быть в shared/
```

### Правила создания новых модулей

#### 1. Когда создавать новый модуль

- Когда появляется новая функциональная область (например, orders, profile, favorites)
- Когда группа компонентов имеет общую бизнес-логику
- Когда модуль может быть независимо разработан и протестирован
- Когда размер существующего модуля становится слишком большим

#### 2. Структура нового модуля

```
new-module/
├── components/             # UI компоненты модуля
│   ├── ComponentA.tsx
│   ├── ComponentB.tsx
│   └── index.ts           # Экспорт компонентов
├── hooks/                 # Хуки модуля
│   ├── useModuleData.ts
│   ├── useModuleLogic.ts
│   └── index.ts           # Экспорт хуков
├── services/              # API сервисы (опционально)
│   ├── api.ts
│   └── index.ts
├── utils/                 # Утилиты модуля (опционально)
│   ├── helpers.ts
│   └── index.ts
├── validation/            # Валидация (опционально)
│   ├── schemas.ts
│   └── index.ts
└── index.ts               # Публичный API модуля
```

#### 3. Публичный API модуля

```typescript
// src/new-module/index.ts
// Экспортируйте только то, что нужно другим модулям
export * from './components';
export * from './hooks';
export type { ModuleDataType, ModuleConfigType } from './types';

// НЕ экспортируйте внутренние детали
// export * from './utils'; // ❌ НЕПРАВИЛЬНО
// export * from './services'; // ❌ НЕПРАВИЛЬНО
```

#### 4. Примеры модулей

**Модуль auth:**

- Компоненты: LoginForm, PhoneInput, PasswordInput
- Хуки: useAuth, useAuthForm
- Валидация: authSchema
- Назначение: Аутентификация пользователей

**Модуль coffee-shops:**

- Компоненты: CoffeeShopCard, MapPlaceholder, SearchBar
- Хуки: useCoffeeShops
- Сервисы: coffeeShopsApi
- Назначение: Поиск и отображение кофеен

**Модуль orders (пример):**

- Компоненты: OrderCard, OrderForm, PaymentForm
- Хуки: useOrders, usePayment
- Сервисы: orderApi, paymentApi
- Назначение: Управление заказами

#### 5. Взаимодействие между модулями

- Модули должны быть слабо связанными
- Используйте типы из `src/types/` для обмена данными
- Избегайте прямых импортов из внутренних частей других модулей
- Используйте shared компоненты для общих UI элементов

```typescript
// ✅ ПРАВИЛЬНО - импорт через публичный API
import { CoffeeShopCard } from '../coffeeshops';
import { useAuth } from '../auth';

// ❌ НЕПРАВИЛЬНО - прямой импорт внутренних деталей
import { CoffeeShopCard } from '../coffeeshops/components/CoffeeShopCard';
import { validateAuth } from '../auth/utils/validation';
```

### Правила рефакторинга

#### 1. Перемещение компонентов

- Если компонент используется в нескольких модулях, переместите его в shared
- Если компонент специфичен для модуля, оставьте его в модуле
- Обновите все импорты после перемещения

#### 2. Обновление экспортов

- После изменения структуры обновите все index.ts файлы
- Проверьте, что все импорты работают корректно
- Убедитесь, что публичный API модуля остается стабильным

### Запрещено

- ❌ Создавать файлы вне модульной структуры
- ❌ Экспортировать внутренние детали реализации
- ❌ Использовать абсолютные пути для импортов внутри модуля
- ❌ Создавать циклические зависимости между модулями
- ❌ Размещать специфичные компоненты в shared модуле

### Рекомендуется

- ✅ Следовать стандартной структуре модуля
- ✅ Использовать barrel exports для упрощения импортов
- ✅ Группировать связанные типы в одном файле
- ✅ Документировать публичный API модуля
- ✅ Регулярно рефакторить код для улучшения структуры
- ✅ Размещать экранные компоненты в папке app/ с группировкой по модулям

- ✅ Группировать связанные типы в одном файле
- ✅ Документировать публичный API модуля
- ✅ Регулярно рефакторить код для улучшения структуры
